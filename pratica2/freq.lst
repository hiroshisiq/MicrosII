                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module freq
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _timer1
                                     13 	.globl _timer0
                                     14 	.globl _getFrequency
                                     15 	.globl _configure_timers
                                     16 	.globl _write
                                     17 	.globl _to2line
                                     18 	.globl _clearLCD
                                     19 	.globl _configure8bits
                                     20 	.globl _send
                                     21 	.globl _delay
                                     22 	.globl _strcat
                                     23 	.globl _sprintf
                                     24 	.globl _CY
                                     25 	.globl _AC
                                     26 	.globl _F0
                                     27 	.globl _RS1
                                     28 	.globl _RS0
                                     29 	.globl _OV
                                     30 	.globl _FL
                                     31 	.globl _P
                                     32 	.globl _TF2
                                     33 	.globl _EXF2
                                     34 	.globl _RCLK
                                     35 	.globl _TCLK
                                     36 	.globl _EXEN2
                                     37 	.globl _TR2
                                     38 	.globl _C_T2
                                     39 	.globl _CP_RL2
                                     40 	.globl _T2CON_7
                                     41 	.globl _T2CON_6
                                     42 	.globl _T2CON_5
                                     43 	.globl _T2CON_4
                                     44 	.globl _T2CON_3
                                     45 	.globl _T2CON_2
                                     46 	.globl _T2CON_1
                                     47 	.globl _T2CON_0
                                     48 	.globl _PT2
                                     49 	.globl _PS
                                     50 	.globl _PT1
                                     51 	.globl _PX1
                                     52 	.globl _PT0
                                     53 	.globl _PX0
                                     54 	.globl _RD
                                     55 	.globl _WR
                                     56 	.globl _T1
                                     57 	.globl _T0
                                     58 	.globl _INT1
                                     59 	.globl _INT0
                                     60 	.globl _TXD
                                     61 	.globl _RXD
                                     62 	.globl _P3_7
                                     63 	.globl _P3_6
                                     64 	.globl _P3_5
                                     65 	.globl _P3_4
                                     66 	.globl _P3_3
                                     67 	.globl _P3_2
                                     68 	.globl _P3_1
                                     69 	.globl _P3_0
                                     70 	.globl _EA
                                     71 	.globl _ET2
                                     72 	.globl _ES
                                     73 	.globl _ET1
                                     74 	.globl _EX1
                                     75 	.globl _ET0
                                     76 	.globl _EX0
                                     77 	.globl _P2_7
                                     78 	.globl _P2_6
                                     79 	.globl _P2_5
                                     80 	.globl _P2_4
                                     81 	.globl _P2_3
                                     82 	.globl _P2_2
                                     83 	.globl _P2_1
                                     84 	.globl _P2_0
                                     85 	.globl _SM0
                                     86 	.globl _SM1
                                     87 	.globl _SM2
                                     88 	.globl _REN
                                     89 	.globl _TB8
                                     90 	.globl _RB8
                                     91 	.globl _TI
                                     92 	.globl _RI
                                     93 	.globl _T2EX
                                     94 	.globl _T2
                                     95 	.globl _P1_7
                                     96 	.globl _P1_6
                                     97 	.globl _P1_5
                                     98 	.globl _P1_4
                                     99 	.globl _P1_3
                                    100 	.globl _P1_2
                                    101 	.globl _P1_1
                                    102 	.globl _P1_0
                                    103 	.globl _TF1
                                    104 	.globl _TR1
                                    105 	.globl _TF0
                                    106 	.globl _TR0
                                    107 	.globl _IE1
                                    108 	.globl _IT1
                                    109 	.globl _IE0
                                    110 	.globl _IT0
                                    111 	.globl _P0_7
                                    112 	.globl _P0_6
                                    113 	.globl _P0_5
                                    114 	.globl _P0_4
                                    115 	.globl _P0_3
                                    116 	.globl _P0_2
                                    117 	.globl _P0_1
                                    118 	.globl _P0_0
                                    119 	.globl _B
                                    120 	.globl _A
                                    121 	.globl _ACC
                                    122 	.globl _PSW
                                    123 	.globl _TH2
                                    124 	.globl _TL2
                                    125 	.globl _RCAP2H
                                    126 	.globl _RCAP2L
                                    127 	.globl _T2MOD
                                    128 	.globl _T2CON
                                    129 	.globl _IP
                                    130 	.globl _P3
                                    131 	.globl _IE
                                    132 	.globl _P2
                                    133 	.globl _SBUF
                                    134 	.globl _SCON
                                    135 	.globl _P1
                                    136 	.globl _TH1
                                    137 	.globl _TH0
                                    138 	.globl _TL1
                                    139 	.globl _TL0
                                    140 	.globl _TMOD
                                    141 	.globl _TCON
                                    142 	.globl _PCON
                                    143 	.globl _DPH
                                    144 	.globl _DPL
                                    145 	.globl _SP
                                    146 	.globl _P0
                                    147 	.globl _waveCounter
                                    148 	.globl _timerCount
                                    149 	.globl _t0
                                    150 ;--------------------------------------------------------
                                    151 ; special function registers
                                    152 ;--------------------------------------------------------
                                    153 	.area RSEG    (ABS,DATA)
      000000                        154 	.org 0x0000
                           000080   155 G$P0$0$0 == 0x0080
                           000080   156 _P0	=	0x0080
                           000081   157 G$SP$0$0 == 0x0081
                           000081   158 _SP	=	0x0081
                           000082   159 G$DPL$0$0 == 0x0082
                           000082   160 _DPL	=	0x0082
                           000083   161 G$DPH$0$0 == 0x0083
                           000083   162 _DPH	=	0x0083
                           000087   163 G$PCON$0$0 == 0x0087
                           000087   164 _PCON	=	0x0087
                           000088   165 G$TCON$0$0 == 0x0088
                           000088   166 _TCON	=	0x0088
                           000089   167 G$TMOD$0$0 == 0x0089
                           000089   168 _TMOD	=	0x0089
                           00008A   169 G$TL0$0$0 == 0x008a
                           00008A   170 _TL0	=	0x008a
                           00008B   171 G$TL1$0$0 == 0x008b
                           00008B   172 _TL1	=	0x008b
                           00008C   173 G$TH0$0$0 == 0x008c
                           00008C   174 _TH0	=	0x008c
                           00008D   175 G$TH1$0$0 == 0x008d
                           00008D   176 _TH1	=	0x008d
                           000090   177 G$P1$0$0 == 0x0090
                           000090   178 _P1	=	0x0090
                           000098   179 G$SCON$0$0 == 0x0098
                           000098   180 _SCON	=	0x0098
                           000099   181 G$SBUF$0$0 == 0x0099
                           000099   182 _SBUF	=	0x0099
                           0000A0   183 G$P2$0$0 == 0x00a0
                           0000A0   184 _P2	=	0x00a0
                           0000A8   185 G$IE$0$0 == 0x00a8
                           0000A8   186 _IE	=	0x00a8
                           0000B0   187 G$P3$0$0 == 0x00b0
                           0000B0   188 _P3	=	0x00b0
                           0000B8   189 G$IP$0$0 == 0x00b8
                           0000B8   190 _IP	=	0x00b8
                           0000C8   191 G$T2CON$0$0 == 0x00c8
                           0000C8   192 _T2CON	=	0x00c8
                           0000C9   193 G$T2MOD$0$0 == 0x00c9
                           0000C9   194 _T2MOD	=	0x00c9
                           0000CA   195 G$RCAP2L$0$0 == 0x00ca
                           0000CA   196 _RCAP2L	=	0x00ca
                           0000CB   197 G$RCAP2H$0$0 == 0x00cb
                           0000CB   198 _RCAP2H	=	0x00cb
                           0000CC   199 G$TL2$0$0 == 0x00cc
                           0000CC   200 _TL2	=	0x00cc
                           0000CD   201 G$TH2$0$0 == 0x00cd
                           0000CD   202 _TH2	=	0x00cd
                           0000D0   203 G$PSW$0$0 == 0x00d0
                           0000D0   204 _PSW	=	0x00d0
                           0000E0   205 G$ACC$0$0 == 0x00e0
                           0000E0   206 _ACC	=	0x00e0
                           0000E0   207 G$A$0$0 == 0x00e0
                           0000E0   208 _A	=	0x00e0
                           0000F0   209 G$B$0$0 == 0x00f0
                           0000F0   210 _B	=	0x00f0
                                    211 ;--------------------------------------------------------
                                    212 ; special function bits
                                    213 ;--------------------------------------------------------
                                    214 	.area RSEG    (ABS,DATA)
      000000                        215 	.org 0x0000
                           000080   216 G$P0_0$0$0 == 0x0080
                           000080   217 _P0_0	=	0x0080
                           000081   218 G$P0_1$0$0 == 0x0081
                           000081   219 _P0_1	=	0x0081
                           000082   220 G$P0_2$0$0 == 0x0082
                           000082   221 _P0_2	=	0x0082
                           000083   222 G$P0_3$0$0 == 0x0083
                           000083   223 _P0_3	=	0x0083
                           000084   224 G$P0_4$0$0 == 0x0084
                           000084   225 _P0_4	=	0x0084
                           000085   226 G$P0_5$0$0 == 0x0085
                           000085   227 _P0_5	=	0x0085
                           000086   228 G$P0_6$0$0 == 0x0086
                           000086   229 _P0_6	=	0x0086
                           000087   230 G$P0_7$0$0 == 0x0087
                           000087   231 _P0_7	=	0x0087
                           000088   232 G$IT0$0$0 == 0x0088
                           000088   233 _IT0	=	0x0088
                           000089   234 G$IE0$0$0 == 0x0089
                           000089   235 _IE0	=	0x0089
                           00008A   236 G$IT1$0$0 == 0x008a
                           00008A   237 _IT1	=	0x008a
                           00008B   238 G$IE1$0$0 == 0x008b
                           00008B   239 _IE1	=	0x008b
                           00008C   240 G$TR0$0$0 == 0x008c
                           00008C   241 _TR0	=	0x008c
                           00008D   242 G$TF0$0$0 == 0x008d
                           00008D   243 _TF0	=	0x008d
                           00008E   244 G$TR1$0$0 == 0x008e
                           00008E   245 _TR1	=	0x008e
                           00008F   246 G$TF1$0$0 == 0x008f
                           00008F   247 _TF1	=	0x008f
                           000090   248 G$P1_0$0$0 == 0x0090
                           000090   249 _P1_0	=	0x0090
                           000091   250 G$P1_1$0$0 == 0x0091
                           000091   251 _P1_1	=	0x0091
                           000092   252 G$P1_2$0$0 == 0x0092
                           000092   253 _P1_2	=	0x0092
                           000093   254 G$P1_3$0$0 == 0x0093
                           000093   255 _P1_3	=	0x0093
                           000094   256 G$P1_4$0$0 == 0x0094
                           000094   257 _P1_4	=	0x0094
                           000095   258 G$P1_5$0$0 == 0x0095
                           000095   259 _P1_5	=	0x0095
                           000096   260 G$P1_6$0$0 == 0x0096
                           000096   261 _P1_6	=	0x0096
                           000097   262 G$P1_7$0$0 == 0x0097
                           000097   263 _P1_7	=	0x0097
                           000090   264 G$T2$0$0 == 0x0090
                           000090   265 _T2	=	0x0090
                           000091   266 G$T2EX$0$0 == 0x0091
                           000091   267 _T2EX	=	0x0091
                           000098   268 G$RI$0$0 == 0x0098
                           000098   269 _RI	=	0x0098
                           000099   270 G$TI$0$0 == 0x0099
                           000099   271 _TI	=	0x0099
                           00009A   272 G$RB8$0$0 == 0x009a
                           00009A   273 _RB8	=	0x009a
                           00009B   274 G$TB8$0$0 == 0x009b
                           00009B   275 _TB8	=	0x009b
                           00009C   276 G$REN$0$0 == 0x009c
                           00009C   277 _REN	=	0x009c
                           00009D   278 G$SM2$0$0 == 0x009d
                           00009D   279 _SM2	=	0x009d
                           00009E   280 G$SM1$0$0 == 0x009e
                           00009E   281 _SM1	=	0x009e
                           00009F   282 G$SM0$0$0 == 0x009f
                           00009F   283 _SM0	=	0x009f
                           0000A0   284 G$P2_0$0$0 == 0x00a0
                           0000A0   285 _P2_0	=	0x00a0
                           0000A1   286 G$P2_1$0$0 == 0x00a1
                           0000A1   287 _P2_1	=	0x00a1
                           0000A2   288 G$P2_2$0$0 == 0x00a2
                           0000A2   289 _P2_2	=	0x00a2
                           0000A3   290 G$P2_3$0$0 == 0x00a3
                           0000A3   291 _P2_3	=	0x00a3
                           0000A4   292 G$P2_4$0$0 == 0x00a4
                           0000A4   293 _P2_4	=	0x00a4
                           0000A5   294 G$P2_5$0$0 == 0x00a5
                           0000A5   295 _P2_5	=	0x00a5
                           0000A6   296 G$P2_6$0$0 == 0x00a6
                           0000A6   297 _P2_6	=	0x00a6
                           0000A7   298 G$P2_7$0$0 == 0x00a7
                           0000A7   299 _P2_7	=	0x00a7
                           0000A8   300 G$EX0$0$0 == 0x00a8
                           0000A8   301 _EX0	=	0x00a8
                           0000A9   302 G$ET0$0$0 == 0x00a9
                           0000A9   303 _ET0	=	0x00a9
                           0000AA   304 G$EX1$0$0 == 0x00aa
                           0000AA   305 _EX1	=	0x00aa
                           0000AB   306 G$ET1$0$0 == 0x00ab
                           0000AB   307 _ET1	=	0x00ab
                           0000AC   308 G$ES$0$0 == 0x00ac
                           0000AC   309 _ES	=	0x00ac
                           0000AD   310 G$ET2$0$0 == 0x00ad
                           0000AD   311 _ET2	=	0x00ad
                           0000AF   312 G$EA$0$0 == 0x00af
                           0000AF   313 _EA	=	0x00af
                           0000B0   314 G$P3_0$0$0 == 0x00b0
                           0000B0   315 _P3_0	=	0x00b0
                           0000B1   316 G$P3_1$0$0 == 0x00b1
                           0000B1   317 _P3_1	=	0x00b1
                           0000B2   318 G$P3_2$0$0 == 0x00b2
                           0000B2   319 _P3_2	=	0x00b2
                           0000B3   320 G$P3_3$0$0 == 0x00b3
                           0000B3   321 _P3_3	=	0x00b3
                           0000B4   322 G$P3_4$0$0 == 0x00b4
                           0000B4   323 _P3_4	=	0x00b4
                           0000B5   324 G$P3_5$0$0 == 0x00b5
                           0000B5   325 _P3_5	=	0x00b5
                           0000B6   326 G$P3_6$0$0 == 0x00b6
                           0000B6   327 _P3_6	=	0x00b6
                           0000B7   328 G$P3_7$0$0 == 0x00b7
                           0000B7   329 _P3_7	=	0x00b7
                           0000B0   330 G$RXD$0$0 == 0x00b0
                           0000B0   331 _RXD	=	0x00b0
                           0000B1   332 G$TXD$0$0 == 0x00b1
                           0000B1   333 _TXD	=	0x00b1
                           0000B2   334 G$INT0$0$0 == 0x00b2
                           0000B2   335 _INT0	=	0x00b2
                           0000B3   336 G$INT1$0$0 == 0x00b3
                           0000B3   337 _INT1	=	0x00b3
                           0000B4   338 G$T0$0$0 == 0x00b4
                           0000B4   339 _T0	=	0x00b4
                           0000B5   340 G$T1$0$0 == 0x00b5
                           0000B5   341 _T1	=	0x00b5
                           0000B6   342 G$WR$0$0 == 0x00b6
                           0000B6   343 _WR	=	0x00b6
                           0000B7   344 G$RD$0$0 == 0x00b7
                           0000B7   345 _RD	=	0x00b7
                           0000B8   346 G$PX0$0$0 == 0x00b8
                           0000B8   347 _PX0	=	0x00b8
                           0000B9   348 G$PT0$0$0 == 0x00b9
                           0000B9   349 _PT0	=	0x00b9
                           0000BA   350 G$PX1$0$0 == 0x00ba
                           0000BA   351 _PX1	=	0x00ba
                           0000BB   352 G$PT1$0$0 == 0x00bb
                           0000BB   353 _PT1	=	0x00bb
                           0000BC   354 G$PS$0$0 == 0x00bc
                           0000BC   355 _PS	=	0x00bc
                           0000BD   356 G$PT2$0$0 == 0x00bd
                           0000BD   357 _PT2	=	0x00bd
                           0000C8   358 G$T2CON_0$0$0 == 0x00c8
                           0000C8   359 _T2CON_0	=	0x00c8
                           0000C9   360 G$T2CON_1$0$0 == 0x00c9
                           0000C9   361 _T2CON_1	=	0x00c9
                           0000CA   362 G$T2CON_2$0$0 == 0x00ca
                           0000CA   363 _T2CON_2	=	0x00ca
                           0000CB   364 G$T2CON_3$0$0 == 0x00cb
                           0000CB   365 _T2CON_3	=	0x00cb
                           0000CC   366 G$T2CON_4$0$0 == 0x00cc
                           0000CC   367 _T2CON_4	=	0x00cc
                           0000CD   368 G$T2CON_5$0$0 == 0x00cd
                           0000CD   369 _T2CON_5	=	0x00cd
                           0000CE   370 G$T2CON_6$0$0 == 0x00ce
                           0000CE   371 _T2CON_6	=	0x00ce
                           0000CF   372 G$T2CON_7$0$0 == 0x00cf
                           0000CF   373 _T2CON_7	=	0x00cf
                           0000C8   374 G$CP_RL2$0$0 == 0x00c8
                           0000C8   375 _CP_RL2	=	0x00c8
                           0000C9   376 G$C_T2$0$0 == 0x00c9
                           0000C9   377 _C_T2	=	0x00c9
                           0000CA   378 G$TR2$0$0 == 0x00ca
                           0000CA   379 _TR2	=	0x00ca
                           0000CB   380 G$EXEN2$0$0 == 0x00cb
                           0000CB   381 _EXEN2	=	0x00cb
                           0000CC   382 G$TCLK$0$0 == 0x00cc
                           0000CC   383 _TCLK	=	0x00cc
                           0000CD   384 G$RCLK$0$0 == 0x00cd
                           0000CD   385 _RCLK	=	0x00cd
                           0000CE   386 G$EXF2$0$0 == 0x00ce
                           0000CE   387 _EXF2	=	0x00ce
                           0000CF   388 G$TF2$0$0 == 0x00cf
                           0000CF   389 _TF2	=	0x00cf
                           0000D0   390 G$P$0$0 == 0x00d0
                           0000D0   391 _P	=	0x00d0
                           0000D1   392 G$FL$0$0 == 0x00d1
                           0000D1   393 _FL	=	0x00d1
                           0000D2   394 G$OV$0$0 == 0x00d2
                           0000D2   395 _OV	=	0x00d2
                           0000D3   396 G$RS0$0$0 == 0x00d3
                           0000D3   397 _RS0	=	0x00d3
                           0000D4   398 G$RS1$0$0 == 0x00d4
                           0000D4   399 _RS1	=	0x00d4
                           0000D5   400 G$F0$0$0 == 0x00d5
                           0000D5   401 _F0	=	0x00d5
                           0000D6   402 G$AC$0$0 == 0x00d6
                           0000D6   403 _AC	=	0x00d6
                           0000D7   404 G$CY$0$0 == 0x00d7
                           0000D7   405 _CY	=	0x00d7
                                    406 ;--------------------------------------------------------
                                    407 ; overlayable register banks
                                    408 ;--------------------------------------------------------
                                    409 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        410 	.ds 8
                                    411 ;--------------------------------------------------------
                                    412 ; overlayable bit register bank
                                    413 ;--------------------------------------------------------
                                    414 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        415 bits:
      000000                        416 	.ds 1
                           008000   417 	b0 = bits[0]
                           008100   418 	b1 = bits[1]
                           008200   419 	b2 = bits[2]
                           008300   420 	b3 = bits[3]
                           008400   421 	b4 = bits[4]
                           008500   422 	b5 = bits[5]
                           008600   423 	b6 = bits[6]
                           008700   424 	b7 = bits[7]
                                    425 ;--------------------------------------------------------
                                    426 ; internal ram data
                                    427 ;--------------------------------------------------------
                                    428 	.area DSEG    (DATA)
                           000000   429 G$t0$0$0==.
      000000                        430 _t0::
      000000                        431 	.ds 2
                           000002   432 G$timerCount$0$0==.
      000002                        433 _timerCount::
      000002                        434 	.ds 2
                           000004   435 G$waveCounter$0$0==.
      000004                        436 _waveCounter::
      000004                        437 	.ds 2
                           000006   438 Lfreq.getFrequency$buf$1$46==.
      000006                        439 _getFrequency_buf_1_46:
      000006                        440 	.ds 12
                                    441 ;--------------------------------------------------------
                                    442 ; overlayable items in internal ram 
                                    443 ;--------------------------------------------------------
                                    444 ;--------------------------------------------------------
                                    445 ; Stack segment in internal ram 
                                    446 ;--------------------------------------------------------
                                    447 	.area	SSEG
      000000                        448 __start__stack:
      000000                        449 	.ds	1
                                    450 
                                    451 ;--------------------------------------------------------
                                    452 ; indirectly addressable internal ram data
                                    453 ;--------------------------------------------------------
                                    454 	.area ISEG    (DATA)
                                    455 ;--------------------------------------------------------
                                    456 ; absolute internal ram data
                                    457 ;--------------------------------------------------------
                                    458 	.area IABS    (ABS,DATA)
                                    459 	.area IABS    (ABS,DATA)
                                    460 ;--------------------------------------------------------
                                    461 ; bit data
                                    462 ;--------------------------------------------------------
                                    463 	.area BSEG    (BIT)
                                    464 ;--------------------------------------------------------
                                    465 ; paged external ram data
                                    466 ;--------------------------------------------------------
                                    467 	.area PSEG    (PAG,XDATA)
                                    468 ;--------------------------------------------------------
                                    469 ; external ram data
                                    470 ;--------------------------------------------------------
                                    471 	.area XSEG    (XDATA)
                                    472 ;--------------------------------------------------------
                                    473 ; absolute external ram data
                                    474 ;--------------------------------------------------------
                                    475 	.area XABS    (ABS,XDATA)
                                    476 ;--------------------------------------------------------
                                    477 ; external initialized ram data
                                    478 ;--------------------------------------------------------
                                    479 	.area XISEG   (XDATA)
                                    480 	.area HOME    (CODE)
                                    481 	.area GSINIT0 (CODE)
                                    482 	.area GSINIT1 (CODE)
                                    483 	.area GSINIT2 (CODE)
                                    484 	.area GSINIT3 (CODE)
                                    485 	.area GSINIT4 (CODE)
                                    486 	.area GSINIT5 (CODE)
                                    487 	.area GSINIT  (CODE)
                                    488 	.area GSFINAL (CODE)
                                    489 	.area CSEG    (CODE)
                                    490 ;--------------------------------------------------------
                                    491 ; interrupt vector 
                                    492 ;--------------------------------------------------------
                                    493 	.area HOME    (CODE)
      000000                        494 __interrupt_vect:
      000000 02r00r00         [24]  495 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  496 	reti
      000004                        497 	.ds	7
      00000B 02r01r41         [24]  498 	ljmp	_timer0
      00000E                        499 	.ds	5
      000013 32               [24]  500 	reti
      000014                        501 	.ds	7
      00001B 02r01rA6         [24]  502 	ljmp	_timer1
                                    503 ;--------------------------------------------------------
                                    504 ; global & static initialisations
                                    505 ;--------------------------------------------------------
                                    506 	.area HOME    (CODE)
                                    507 	.area GSINIT  (CODE)
                                    508 	.area GSFINAL (CODE)
                                    509 	.area GSINIT  (CODE)
                                    510 	.globl __sdcc_gsinit_startup
                                    511 	.globl __sdcc_program_startup
                                    512 	.globl __start__stack
                                    513 	.globl __mcs51_genXINIT
                                    514 	.globl __mcs51_genXRAMCLEAR
                                    515 	.globl __mcs51_genRAMCLEAR
                           000000   516 	C$freq.c$12$1$50 ==.
                                    517 ;	freq.c:12: int t0 =   0;
      000000 E4               [12]  518 	clr	a
      000001 F5*00            [12]  519 	mov	_t0,a
      000003 F5*01            [12]  520 	mov	(_t0 + 1),a
                           000005   521 	C$freq.c$13$1$50 ==.
                                    522 ;	freq.c:13: int timerCount =    20;
      000005 75*02 14         [24]  523 	mov	_timerCount,#0x14
                                    524 ;	1-genFromRTrack replaced	mov	(_timerCount + 1),#0x00
      000008 F5*03            [12]  525 	mov	(_timerCount + 1),a
                           00000A   526 	C$freq.c$14$1$50 ==.
                                    527 ;	freq.c:14: int waveCounter = 0;
      00000A F5*04            [12]  528 	mov	_waveCounter,a
      00000C F5*05            [12]  529 	mov	(_waveCounter + 1),a
                                    530 	.area GSFINAL (CODE)
      000000 02r00r1E         [24]  531 	ljmp	__sdcc_program_startup
                                    532 ;--------------------------------------------------------
                                    533 ; Home
                                    534 ;--------------------------------------------------------
                                    535 	.area HOME    (CODE)
                                    536 	.area HOME    (CODE)
      00001E                        537 __sdcc_program_startup:
      00001E 02r01rB7         [24]  538 	ljmp	_main
                                    539 ;	return from main will return to caller
                                    540 ;--------------------------------------------------------
                                    541 ; code
                                    542 ;--------------------------------------------------------
                                    543 	.area CSEG    (CODE)
                                    544 ;------------------------------------------------------------
                                    545 ;Allocation info for local variables in function 'delay'
                                    546 ;------------------------------------------------------------
                                    547 ;mstime                    Allocated to registers r6 r7 
                                    548 ;i                         Allocated to registers r4 r5 
                                    549 ;j                         Allocated to registers r2 r3 
                                    550 ;------------------------------------------------------------
                           000000   551 	G$delay$0$0 ==.
                           000000   552 	C$lcd.h$10$0$0 ==.
                                    553 ;	lcd.h:10: void delay(int mstime) {
                                    554 ;	-----------------------------------------
                                    555 ;	 function delay
                                    556 ;	-----------------------------------------
      000000                        557 _delay:
                           000007   558 	ar7 = 0x07
                           000006   559 	ar6 = 0x06
                           000005   560 	ar5 = 0x05
                           000004   561 	ar4 = 0x04
                           000003   562 	ar3 = 0x03
                           000002   563 	ar2 = 0x02
                           000001   564 	ar1 = 0x01
                           000000   565 	ar0 = 0x00
      000000 AE 82            [24]  566 	mov	r6,dpl
      000002 AF 83            [24]  567 	mov	r7,dph
                           000004   568 	C$lcd.h$12$1$36 ==.
                                    569 ;	lcd.h:12: for(i=0; i<mstime; i++)
      000004 7C 00            [12]  570 	mov	r4,#0x00
      000006 7D 00            [12]  571 	mov	r5,#0x00
      000008                        572 00107$:
      000008 8E 02            [24]  573 	mov	ar2,r6
      00000A 8F 03            [24]  574 	mov	ar3,r7
      00000C C3               [12]  575 	clr	c
      00000D EC               [12]  576 	mov	a,r4
      00000E 9A               [12]  577 	subb	a,r2
      00000F ED               [12]  578 	mov	a,r5
      000010 9B               [12]  579 	subb	a,r3
      000011 50 1B            [24]  580 	jnc	00109$
                           000013   581 	C$lcd.h$13$1$36 ==.
                                    582 ;	lcd.h:13: for(j=0; j<1275; j++);
      000013 7A FB            [12]  583 	mov	r2,#0xfb
      000015 7B 04            [12]  584 	mov	r3,#0x04
      000017                        585 00105$:
      000017 EA               [12]  586 	mov	a,r2
      000018 24 FF            [12]  587 	add	a,#0xff
      00001A F8               [12]  588 	mov	r0,a
      00001B EB               [12]  589 	mov	a,r3
      00001C 34 FF            [12]  590 	addc	a,#0xff
      00001E F9               [12]  591 	mov	r1,a
      00001F 88 02            [24]  592 	mov	ar2,r0
      000021 89 03            [24]  593 	mov	ar3,r1
      000023 E8               [12]  594 	mov	a,r0
      000024 49               [12]  595 	orl	a,r1
      000025 70 F0            [24]  596 	jnz	00105$
                           000027   597 	C$lcd.h$12$1$36 ==.
                                    598 ;	lcd.h:12: for(i=0; i<mstime; i++)
      000027 0C               [12]  599 	inc	r4
      000028 BC 00 DD         [24]  600 	cjne	r4,#0x00,00107$
      00002B 0D               [12]  601 	inc	r5
      00002C 80 DA            [24]  602 	sjmp	00107$
      00002E                        603 00109$:
                           00002E   604 	C$lcd.h$14$1$36 ==.
                           00002E   605 	XG$delay$0$0 ==.
      00002E 22               [24]  606 	ret
                                    607 ;------------------------------------------------------------
                                    608 ;Allocation info for local variables in function 'send'
                                    609 ;------------------------------------------------------------
                                    610 ;data                      Allocated to registers r7 
                                    611 ;------------------------------------------------------------
                           00002F   612 	G$send$0$0 ==.
                           00002F   613 	C$lcd.h$16$1$36 ==.
                                    614 ;	lcd.h:16: void send(char data) {
                                    615 ;	-----------------------------------------
                                    616 ;	 function send
                                    617 ;	-----------------------------------------
      00002F                        618 _send:
      00002F AF 82            [24]  619 	mov	r7,dpl
                           000031   620 	C$lcd.h$18$1$38 ==.
                                    621 ;	lcd.h:18: P0 = (P0 & 0x0F) | (data & 0xF0);
      000031 74 0F            [12]  622 	mov	a,#0x0f
      000033 55 80            [12]  623 	anl	a,_P0
      000035 FE               [12]  624 	mov	r6,a
      000036 74 F0            [12]  625 	mov	a,#0xf0
      000038 5F               [12]  626 	anl	a,r7
      000039 4E               [12]  627 	orl	a,r6
      00003A F5 80            [12]  628 	mov	_P0,a
                           00003C   629 	C$lcd.h$20$1$38 ==.
                                    630 ;	lcd.h:20: P2 = data;
      00003C 8F A0            [24]  631 	mov	_P2,r7
                           00003E   632 	C$lcd.h$22$1$38 ==.
                                    633 ;	lcd.h:22: P0_2 = 1;
      00003E D2 82            [12]  634 	setb	_P0_2
                           000040   635 	C$lcd.h$23$1$38 ==.
                                    636 ;	lcd.h:23: P0_2 = 0;
      000040 C2 82            [12]  637 	clr	_P0_2
                           000042   638 	C$lcd.h$25$1$38 ==.
                                    639 ;	lcd.h:25: delay(2);
      000042 90 00 02         [24]  640 	mov	dptr,#0x0002
      000045 12r00r00         [24]  641 	lcall	_delay
                           000048   642 	C$lcd.h$26$1$38 ==.
                           000048   643 	XG$send$0$0 ==.
      000048 22               [24]  644 	ret
                                    645 ;------------------------------------------------------------
                                    646 ;Allocation info for local variables in function 'configure8bits'
                                    647 ;------------------------------------------------------------
                           000049   648 	G$configure8bits$0$0 ==.
                           000049   649 	C$lcd.h$28$1$38 ==.
                                    650 ;	lcd.h:28: void configure8bits() {
                                    651 ;	-----------------------------------------
                                    652 ;	 function configure8bits
                                    653 ;	-----------------------------------------
      000049                        654 _configure8bits:
                           000049   655 	C$lcd.h$29$1$39 ==.
                                    656 ;	lcd.h:29: P0 = 0x00;
      000049 75 80 00         [24]  657 	mov	_P0,#0x00
                           00004C   658 	C$lcd.h$30$1$39 ==.
                                    659 ;	lcd.h:30: delay(20);
      00004C 90 00 14         [24]  660 	mov	dptr,#0x0014
      00004F 12r00r00         [24]  661 	lcall	_delay
                           000052   662 	C$lcd.h$31$1$39 ==.
                                    663 ;	lcd.h:31: send(0x0E); // display on
      000052 75 82 0E         [24]  664 	mov	dpl,#0x0e
      000055 12r00r2F         [24]  665 	lcall	_send
                           000058   666 	C$lcd.h$32$1$39 ==.
                                    667 ;	lcd.h:32: send(0x06); // write to >>
      000058 75 82 06         [24]  668 	mov	dpl,#0x06
      00005B 12r00r2F         [24]  669 	lcall	_send
                           00005E   670 	C$lcd.h$33$1$39 ==.
                           00005E   671 	XG$configure8bits$0$0 ==.
      00005E 22               [24]  672 	ret
                                    673 ;------------------------------------------------------------
                                    674 ;Allocation info for local variables in function 'clearLCD'
                                    675 ;------------------------------------------------------------
                           00005F   676 	G$clearLCD$0$0 ==.
                           00005F   677 	C$lcd.h$35$1$39 ==.
                                    678 ;	lcd.h:35: void clearLCD() {
                                    679 ;	-----------------------------------------
                                    680 ;	 function clearLCD
                                    681 ;	-----------------------------------------
      00005F                        682 _clearLCD:
                           00005F   683 	C$lcd.h$36$1$40 ==.
                                    684 ;	lcd.h:36: P0_0 = 0x00;
      00005F C2 80            [12]  685 	clr	_P0_0
                           000061   686 	C$lcd.h$37$1$40 ==.
                                    687 ;	lcd.h:37: send(0x01);
      000061 75 82 01         [24]  688 	mov	dpl,#0x01
      000064 12r00r2F         [24]  689 	lcall	_send
                           000067   690 	C$lcd.h$38$1$40 ==.
                                    691 ;	lcd.h:38: P0_0 = 0x01;
      000067 D2 80            [12]  692 	setb	_P0_0
                           000069   693 	C$lcd.h$39$1$40 ==.
                           000069   694 	XG$clearLCD$0$0 ==.
      000069 22               [24]  695 	ret
                                    696 ;------------------------------------------------------------
                                    697 ;Allocation info for local variables in function 'to2line'
                                    698 ;------------------------------------------------------------
                           00006A   699 	G$to2line$0$0 ==.
                           00006A   700 	C$lcd.h$41$1$40 ==.
                                    701 ;	lcd.h:41: void to2line() {
                                    702 ;	-----------------------------------------
                                    703 ;	 function to2line
                                    704 ;	-----------------------------------------
      00006A                        705 _to2line:
                           00006A   706 	C$lcd.h$42$1$41 ==.
                                    707 ;	lcd.h:42: P0 = 0x00;
      00006A 75 80 00         [24]  708 	mov	_P0,#0x00
                           00006D   709 	C$lcd.h$43$1$41 ==.
                                    710 ;	lcd.h:43: send(0xC0);
      00006D 75 82 C0         [24]  711 	mov	dpl,#0xc0
      000070 12r00r2F         [24]  712 	lcall	_send
                           000073   713 	C$lcd.h$44$1$41 ==.
                           000073   714 	XG$to2line$0$0 ==.
      000073 22               [24]  715 	ret
                                    716 ;------------------------------------------------------------
                                    717 ;Allocation info for local variables in function 'write'
                                    718 ;------------------------------------------------------------
                                    719 ;txt                       Allocated to registers r5 r6 r7 
                                    720 ;------------------------------------------------------------
                           000074   721 	G$write$0$0 ==.
                           000074   722 	C$lcd.h$46$1$41 ==.
                                    723 ;	lcd.h:46: void write(char *txt) {
                                    724 ;	-----------------------------------------
                                    725 ;	 function write
                                    726 ;	-----------------------------------------
      000074                        727 _write:
      000074 AD 82            [24]  728 	mov	r5,dpl
      000076 AE 83            [24]  729 	mov	r6,dph
      000078 AF F0            [24]  730 	mov	r7,b
                           00007A   731 	C$lcd.h$47$1$43 ==.
                                    732 ;	lcd.h:47: P0_0 = 0x01; // RS = 1;
      00007A D2 80            [12]  733 	setb	_P0_0
                           00007C   734 	C$lcd.h$48$1$43 ==.
                                    735 ;	lcd.h:48: while(*txt != '\0') {
      00007C                        736 00101$:
      00007C 8D 82            [24]  737 	mov	dpl,r5
      00007E 8E 83            [24]  738 	mov	dph,r6
      000080 8F F0            [24]  739 	mov	b,r7
      000082 12r00r00         [24]  740 	lcall	__gptrget
      000085 FC               [12]  741 	mov	r4,a
      000086 60 18            [24]  742 	jz	00104$
                           000088   743 	C$lcd.h$49$2$44 ==.
                                    744 ;	lcd.h:49: send(*txt);
      000088 8C 82            [24]  745 	mov	dpl,r4
      00008A C0 07            [24]  746 	push	ar7
      00008C C0 06            [24]  747 	push	ar6
      00008E C0 05            [24]  748 	push	ar5
      000090 12r00r2F         [24]  749 	lcall	_send
      000093 D0 05            [24]  750 	pop	ar5
      000095 D0 06            [24]  751 	pop	ar6
      000097 D0 07            [24]  752 	pop	ar7
                           000099   753 	C$lcd.h$50$2$44 ==.
                                    754 ;	lcd.h:50: txt++;
      000099 0D               [12]  755 	inc	r5
      00009A BD 00 DF         [24]  756 	cjne	r5,#0x00,00101$
      00009D 0E               [12]  757 	inc	r6
      00009E 80 DC            [24]  758 	sjmp	00101$
      0000A0                        759 00104$:
                           0000A0   760 	C$lcd.h$52$1$43 ==.
                           0000A0   761 	XG$write$0$0 ==.
      0000A0 22               [24]  762 	ret
                                    763 ;------------------------------------------------------------
                                    764 ;Allocation info for local variables in function 'configure_timers'
                                    765 ;------------------------------------------------------------
                           0000A1   766 	G$configure_timers$0$0 ==.
                           0000A1   767 	C$freq.c$16$1$43 ==.
                                    768 ;	freq.c:16: void configure_timers(){
                                    769 ;	-----------------------------------------
                                    770 ;	 function configure_timers
                                    771 ;	-----------------------------------------
      0000A1                        772 _configure_timers:
                           0000A1   773 	C$freq.c$20$1$45 ==.
                                    774 ;	freq.c:20: TMOD = 0x51;
      0000A1 75 89 51         [24]  775 	mov	_TMOD,#0x51
                           0000A4   776 	C$freq.c$21$1$45 ==.
                                    777 ;	freq.c:21: TH0 = high50ms;
      0000A4 75 8C 4B         [24]  778 	mov	_TH0,#0x4b
                           0000A7   779 	C$freq.c$22$1$45 ==.
                                    780 ;	freq.c:22: TL0 = low50ms;
      0000A7 75 8A FF         [24]  781 	mov	_TL0,#0xff
                           0000AA   782 	C$freq.c$23$1$45 ==.
                                    783 ;	freq.c:23: EA = 1;
      0000AA D2 AF            [12]  784 	setb	_EA
                           0000AC   785 	C$freq.c$24$1$45 ==.
                                    786 ;	freq.c:24: ET1 = 1;
      0000AC D2 AB            [12]  787 	setb	_ET1
                           0000AE   788 	C$freq.c$25$1$45 ==.
                                    789 ;	freq.c:25: ET0 = 1;
      0000AE D2 A9            [12]  790 	setb	_ET0
                           0000B0   791 	C$freq.c$26$1$45 ==.
                           0000B0   792 	XG$configure_timers$0$0 ==.
      0000B0 22               [24]  793 	ret
                                    794 ;------------------------------------------------------------
                                    795 ;Allocation info for local variables in function 'getFrequency'
                                    796 ;------------------------------------------------------------
                                    797 ;frequency                 Allocated to registers r4 r5 
                                    798 ;buf                       Allocated with name '_getFrequency_buf_1_46'
                                    799 ;------------------------------------------------------------
                           0000B1   800 	G$getFrequency$0$0 ==.
                           0000B1   801 	C$freq.c$28$1$45 ==.
                                    802 ;	freq.c:28: void getFrequency(){
                                    803 ;	-----------------------------------------
                                    804 ;	 function getFrequency
                                    805 ;	-----------------------------------------
      0000B1                        806 _getFrequency:
                           0000B1   807 	C$freq.c$33$1$46 ==.
                                    808 ;	freq.c:33: frequency =  65536*waveCounter + 256*TH1 + TL1;
      0000B1 AC*04            [24]  809 	mov	r4,_waveCounter
      0000B3 E5*05            [12]  810 	mov	a,(_waveCounter + 1)
      0000B5 FD               [12]  811 	mov	r5,a
      0000B6 33               [12]  812 	rlc	a
      0000B7 95 E0            [12]  813 	subb	a,acc
      0000B9 8D 07            [24]  814 	mov	ar7,r5
      0000BB 8C 06            [24]  815 	mov	ar6,r4
      0000BD 7D 00            [12]  816 	mov	r5,#0x00
      0000BF 7C 00            [12]  817 	mov	r4,#0x00
      0000C1 AB 8D            [24]  818 	mov	r3,_TH1
      0000C3 7A 00            [12]  819 	mov	r2,#0x00
      0000C5 8A 00            [24]  820 	mov	ar0,r2
      0000C7 EB               [12]  821 	mov	a,r3
      0000C8 F9               [12]  822 	mov	r1,a
      0000C9 33               [12]  823 	rlc	a
      0000CA 95 E0            [12]  824 	subb	a,acc
      0000CC FA               [12]  825 	mov	r2,a
      0000CD FB               [12]  826 	mov	r3,a
      0000CE E8               [12]  827 	mov	a,r0
      0000CF 2C               [12]  828 	add	a,r4
      0000D0 FC               [12]  829 	mov	r4,a
      0000D1 E9               [12]  830 	mov	a,r1
      0000D2 3D               [12]  831 	addc	a,r5
      0000D3 FD               [12]  832 	mov	r5,a
      0000D4 EA               [12]  833 	mov	a,r2
      0000D5 3E               [12]  834 	addc	a,r6
      0000D6 FE               [12]  835 	mov	r6,a
      0000D7 EB               [12]  836 	mov	a,r3
      0000D8 3F               [12]  837 	addc	a,r7
      0000D9 FF               [12]  838 	mov	r7,a
      0000DA AA 8B            [24]  839 	mov	r2,_TL1
      0000DC 7B 00            [12]  840 	mov	r3,#0x00
      0000DE 8A 00            [24]  841 	mov	ar0,r2
      0000E0 EB               [12]  842 	mov	a,r3
      0000E1 F9               [12]  843 	mov	r1,a
      0000E2 33               [12]  844 	rlc	a
      0000E3 95 E0            [12]  845 	subb	a,acc
      0000E5 FA               [12]  846 	mov	r2,a
      0000E6 FB               [12]  847 	mov	r3,a
      0000E7 E8               [12]  848 	mov	a,r0
      0000E8 2C               [12]  849 	add	a,r4
      0000E9 FC               [12]  850 	mov	r4,a
      0000EA E9               [12]  851 	mov	a,r1
      0000EB 3D               [12]  852 	addc	a,r5
      0000EC FD               [12]  853 	mov	r5,a
      0000ED EA               [12]  854 	mov	a,r2
      0000EE 3E               [12]  855 	addc	a,r6
      0000EF EB               [12]  856 	mov	a,r3
      0000F0 3F               [12]  857 	addc	a,r7
                           0000F1   858 	C$freq.c$35$1$46 ==.
                                    859 ;	freq.c:35: sprintf(buf,"%d", frequency);
      0000F1 C0 04            [24]  860 	push	ar4
      0000F3 C0 05            [24]  861 	push	ar5
      0000F5 74r00            [12]  862 	mov	a,#___str_0
      0000F7 C0 E0            [24]  863 	push	acc
      0000F9 74s00            [12]  864 	mov	a,#(___str_0 >> 8)
      0000FB C0 E0            [24]  865 	push	acc
      0000FD 74 80            [12]  866 	mov	a,#0x80
      0000FF C0 E0            [24]  867 	push	acc
      000101 74r06            [12]  868 	mov	a,#_getFrequency_buf_1_46
      000103 C0 E0            [24]  869 	push	acc
      000105 74s00            [12]  870 	mov	a,#(_getFrequency_buf_1_46 >> 8)
      000107 C0 E0            [24]  871 	push	acc
      000109 74 40            [12]  872 	mov	a,#0x40
      00010B C0 E0            [24]  873 	push	acc
      00010D 12r00r00         [24]  874 	lcall	_sprintf
      000110 E5 81            [12]  875 	mov	a,sp
      000112 24 F8            [12]  876 	add	a,#0xf8
      000114 F5 81            [12]  877 	mov	sp,a
                           000116   878 	C$freq.c$36$1$46 ==.
                                    879 ;	freq.c:36: strcat(buf, " Hz");
      000116 75*00r03         [24]  880 	mov	_strcat_PARM_2,#___str_1
      000119 75*01s00         [24]  881 	mov	(_strcat_PARM_2 + 1),#(___str_1 >> 8)
      00011C 75*02 80         [24]  882 	mov	(_strcat_PARM_2 + 2),#0x80
      00011F 90r00r06         [24]  883 	mov	dptr,#_getFrequency_buf_1_46
      000122 75 F0 40         [24]  884 	mov	b,#0x40
      000125 12r00r00         [24]  885 	lcall	_strcat
                           000128   886 	C$freq.c$38$1$46 ==.
                                    887 ;	freq.c:38: delay(20);
      000128 90 00 14         [24]  888 	mov	dptr,#0x0014
      00012B 12r00r00         [24]  889 	lcall	_delay
                           00012E   890 	C$freq.c$39$1$46 ==.
                                    891 ;	freq.c:39: clearLCD();
      00012E 12r00r5F         [24]  892 	lcall	_clearLCD
                           000131   893 	C$freq.c$40$1$46 ==.
                                    894 ;	freq.c:40: delay(200);
      000131 90 00 C8         [24]  895 	mov	dptr,#0x00c8
      000134 12r00r00         [24]  896 	lcall	_delay
                           000137   897 	C$freq.c$41$1$46 ==.
                                    898 ;	freq.c:41: write(buf);
      000137 90r00r06         [24]  899 	mov	dptr,#_getFrequency_buf_1_46
      00013A 75 F0 40         [24]  900 	mov	b,#0x40
      00013D 12r00r74         [24]  901 	lcall	_write
                           000140   902 	C$freq.c$42$1$46 ==.
                           000140   903 	XG$getFrequency$0$0 ==.
      000140 22               [24]  904 	ret
                                    905 ;------------------------------------------------------------
                                    906 ;Allocation info for local variables in function 'timer0'
                                    907 ;------------------------------------------------------------
                           000141   908 	G$timer0$0$0 ==.
                           000141   909 	C$freq.c$44$1$46 ==.
                                    910 ;	freq.c:44: void timer0() __interrupt(1){
                                    911 ;	-----------------------------------------
                                    912 ;	 function timer0
                                    913 ;	-----------------------------------------
      000141                        914 _timer0:
      000141 C0*00            [24]  915 	push	bits
      000143 C0 E0            [24]  916 	push	acc
      000145 C0 F0            [24]  917 	push	b
      000147 C0 82            [24]  918 	push	dpl
      000149 C0 83            [24]  919 	push	dph
      00014B C0 07            [24]  920 	push	(0+7)
      00014D C0 06            [24]  921 	push	(0+6)
      00014F C0 05            [24]  922 	push	(0+5)
      000151 C0 04            [24]  923 	push	(0+4)
      000153 C0 03            [24]  924 	push	(0+3)
      000155 C0 02            [24]  925 	push	(0+2)
      000157 C0 01            [24]  926 	push	(0+1)
      000159 C0 00            [24]  927 	push	(0+0)
      00015B C0 D0            [24]  928 	push	psw
      00015D 75 D0 00         [24]  929 	mov	psw,#0x00
                           000160   930 	C$freq.c$46$1$47 ==.
                                    931 ;	freq.c:46: timerCount--;
      000160 15*02            [12]  932 	dec	_timerCount
      000162 74 FF            [12]  933 	mov	a,#0xff
      000164 B5*02 02         [24]  934 	cjne	a,_timerCount,00108$
      000167 15*03            [12]  935 	dec	(_timerCount + 1)
      000169                        936 00108$:
                           000169   937 	C$freq.c$48$1$47 ==.
                                    938 ;	freq.c:48: TH0 = high50ms;
      000169 75 8C 4B         [24]  939 	mov	_TH0,#0x4b
                           00016C   940 	C$freq.c$49$1$47 ==.
                                    941 ;	freq.c:49: TL0 = low50ms;
      00016C 75 8A FF         [24]  942 	mov	_TL0,#0xff
                           00016F   943 	C$freq.c$51$1$47 ==.
                                    944 ;	freq.c:51: if(timerCount == 0){
      00016F E5*02            [12]  945 	mov	a,_timerCount
      000171 45*03            [12]  946 	orl	a,(_timerCount + 1)
      000173 70 14            [24]  947 	jnz	00103$
                           000175   948 	C$freq.c$52$2$48 ==.
                                    949 ;	freq.c:52: TR0 = 0;
      000175 C2 8C            [12]  950 	clr	_TR0
                           000177   951 	C$freq.c$53$2$48 ==.
                                    952 ;	freq.c:53: TR1 = 0;
      000177 C2 8E            [12]  953 	clr	_TR1
                           000179   954 	C$freq.c$55$2$48 ==.
                                    955 ;	freq.c:55: getFrequency();
      000179 12r00rB1         [24]  956 	lcall	_getFrequency
                           00017C   957 	C$freq.c$56$2$48 ==.
                                    958 ;	freq.c:56: configure_timers();
      00017C 12r00rA1         [24]  959 	lcall	_configure_timers
                           00017F   960 	C$freq.c$58$2$48 ==.
                                    961 ;	freq.c:58: timerCount = 20;
      00017F 75*02 14         [24]  962 	mov	_timerCount,#0x14
      000182 75*03 00         [24]  963 	mov	(_timerCount + 1),#0x00
                           000185   964 	C$freq.c$59$2$48 ==.
                                    965 ;	freq.c:59: TR0 = 1;
      000185 D2 8C            [12]  966 	setb	_TR0
                           000187   967 	C$freq.c$60$2$48 ==.
                                    968 ;	freq.c:60: TR1 = 1;
      000187 D2 8E            [12]  969 	setb	_TR1
      000189                        970 00103$:
      000189 D0 D0            [24]  971 	pop	psw
      00018B D0 00            [24]  972 	pop	(0+0)
      00018D D0 01            [24]  973 	pop	(0+1)
      00018F D0 02            [24]  974 	pop	(0+2)
      000191 D0 03            [24]  975 	pop	(0+3)
      000193 D0 04            [24]  976 	pop	(0+4)
      000195 D0 05            [24]  977 	pop	(0+5)
      000197 D0 06            [24]  978 	pop	(0+6)
      000199 D0 07            [24]  979 	pop	(0+7)
      00019B D0 83            [24]  980 	pop	dph
      00019D D0 82            [24]  981 	pop	dpl
      00019F D0 F0            [24]  982 	pop	b
      0001A1 D0 E0            [24]  983 	pop	acc
      0001A3 D0*00            [24]  984 	pop	bits
                           0001A5   985 	C$freq.c$63$1$47 ==.
                           0001A5   986 	XG$timer0$0$0 ==.
      0001A5 32               [24]  987 	reti
                                    988 ;------------------------------------------------------------
                                    989 ;Allocation info for local variables in function 'timer1'
                                    990 ;------------------------------------------------------------
                           0001A6   991 	G$timer1$0$0 ==.
                           0001A6   992 	C$freq.c$65$1$47 ==.
                                    993 ;	freq.c:65: void timer1() __interrupt(3){
                                    994 ;	-----------------------------------------
                                    995 ;	 function timer1
                                    996 ;	-----------------------------------------
      0001A6                        997 _timer1:
      0001A6 C0 E0            [24]  998 	push	acc
      0001A8 C0 D0            [24]  999 	push	psw
                           0001AA  1000 	C$freq.c$67$1$49 ==.
                                   1001 ;	freq.c:67: waveCounter++;
      0001AA 05*04            [12] 1002 	inc	_waveCounter
      0001AC E4               [12] 1003 	clr	a
      0001AD B5*04 02         [24] 1004 	cjne	a,_waveCounter,00103$
      0001B0 05*05            [12] 1005 	inc	(_waveCounter + 1)
      0001B2                       1006 00103$:
      0001B2 D0 D0            [24] 1007 	pop	psw
      0001B4 D0 E0            [24] 1008 	pop	acc
                           0001B6  1009 	C$freq.c$68$1$49 ==.
                           0001B6  1010 	XG$timer1$0$0 ==.
      0001B6 32               [24] 1011 	reti
                                   1012 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   1013 ;	eliminated unneeded push/pop dpl
                                   1014 ;	eliminated unneeded push/pop dph
                                   1015 ;	eliminated unneeded push/pop b
                                   1016 ;------------------------------------------------------------
                                   1017 ;Allocation info for local variables in function 'main'
                                   1018 ;------------------------------------------------------------
                           0001B7  1019 	G$main$0$0 ==.
                           0001B7  1020 	C$freq.c$70$1$49 ==.
                                   1021 ;	freq.c:70: int main () {
                                   1022 ;	-----------------------------------------
                                   1023 ;	 function main
                                   1024 ;	-----------------------------------------
      0001B7                       1025 _main:
                           0001B7  1026 	C$freq.c$71$1$50 ==.
                                   1027 ;	freq.c:71: configure8bits();
      0001B7 12r00r49         [24] 1028 	lcall	_configure8bits
                           0001BA  1029 	C$freq.c$72$1$50 ==.
                                   1030 ;	freq.c:72: clearLCD();
      0001BA 12r00r5F         [24] 1031 	lcall	_clearLCD
                           0001BD  1032 	C$freq.c$73$1$50 ==.
                                   1033 ;	freq.c:73: configure_timers();
      0001BD 12r00rA1         [24] 1034 	lcall	_configure_timers
                           0001C0  1035 	C$freq.c$75$1$50 ==.
                                   1036 ;	freq.c:75: TR0 = 1;
      0001C0 D2 8C            [12] 1037 	setb	_TR0
                           0001C2  1038 	C$freq.c$76$1$50 ==.
                                   1039 ;	freq.c:76: TR1 = 1;
      0001C2 D2 8E            [12] 1040 	setb	_TR1
                           0001C4  1041 	C$freq.c$78$1$50 ==.
                                   1042 ;	freq.c:78: while(1);	// end
      0001C4                       1043 00102$:
      0001C4 80 FE            [24] 1044 	sjmp	00102$
                           0001C6  1045 	C$freq.c$79$1$50 ==.
                           0001C6  1046 	XG$main$0$0 ==.
      0001C6 22               [24] 1047 	ret
                                   1048 	.area CSEG    (CODE)
                                   1049 	.area CONST   (CODE)
                           000000  1050 Ffreq$__str_0$0$0 == .
      000000                       1051 ___str_0:
      000000 25 64                 1052 	.ascii "%d"
      000002 00                    1053 	.db 0x00
                           000003  1054 Ffreq$__str_1$0$0 == .
      000003                       1055 ___str_1:
      000003 20 48 7A              1056 	.ascii " Hz"
      000006 00                    1057 	.db 0x00
                                   1058 	.area XINIT   (CODE)
                                   1059 	.area CABS    (ABS,CODE)
